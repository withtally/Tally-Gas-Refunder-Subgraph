type Refunder @entity {
  id: ID! #contract Address of Refunder
  owner: String!
  maxGasPrice: BigInt!
  version: BigInt!
  isPaused: Boolean!
  balance: BigInt!
  refundCount: BigInt!
  depositCount: BigInt!
  withdrawlCount: BigInt!
  refundableCount: BigInt!
  refundables: [Refundable!]! @derivedFrom(field: "refunder")
  deposits: [Deposit!]! @derivedFrom(field: "refunder")
  withdrawls: [Withdrawl!]! @derivedFrom(field: "refunder")
  refunds: [Refund!]! @derivedFrom(field: "refunder")
}

type Refundable @entity{
  id: ID! #contract address of Refunder .concat( target) con
  refunder: Refunder!
  target: String!
  identifier: Bytes!
  validatingContract: Bytes
  validatingIdentifier: Bytes
  isRefundable: Boolean!
  refunds: [Refund!]! @derivedFrom(field: "refundable")
}

type Refund @entity {
  id: ID! #tx hash + log index
  refundable: Refundable!
  refunder: Refunder!
  caller: String!
  target: String!
  identifier: String!
  refund: BigInt!
}

type Withdrawl @entity {
  id: ID! #tx hash I suppose + log index
  value: BigInt!
  recipient: Bytes!
  refunder: Refunder!
}

type Deposit @entity {
  id: ID!
  value: BigInt!
  depositor: Bytes!
  refunder: Refunder!
}
