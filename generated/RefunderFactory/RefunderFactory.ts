// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RefunderCreated extends ethereum.Event {
  get params(): RefunderCreated__Params {
    return new RefunderCreated__Params(this);
  }
}

export class RefunderCreated__Params {
  _event: RefunderCreated;

  constructor(event: RefunderCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get refunderAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RefunderFactory extends ethereum.SmartContract {
  static bind(address: Address): RefunderFactory {
    return new RefunderFactory("RefunderFactory", address);
  }

  REFUNDER_VERSION(): i32 {
    let result = super.call(
      "REFUNDER_VERSION",
      "REFUNDER_VERSION():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_REFUNDER_VERSION(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "REFUNDER_VERSION",
      "REFUNDER_VERSION():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  createRefunder(): Address {
    let result = super.call("createRefunder", "createRefunder():(address)", []);

    return result[0].toAddress();
  }

  try_createRefunder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createRefunder",
      "createRefunder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get registry_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateRefunderCall extends ethereum.Call {
  get inputs(): CreateRefunderCall__Inputs {
    return new CreateRefunderCall__Inputs(this);
  }

  get outputs(): CreateRefunderCall__Outputs {
    return new CreateRefunderCall__Outputs(this);
  }
}

export class CreateRefunderCall__Inputs {
  _call: CreateRefunderCall;

  constructor(call: CreateRefunderCall) {
    this._call = call;
  }
}

export class CreateRefunderCall__Outputs {
  _call: CreateRefunderCall;

  constructor(call: CreateRefunderCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
